name: Test link deployment

on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Name of Testing environment'
        required: true
        type: string
      action:
        description: 'Action for Testing environment'
        required: true
        default: 'update'
        type: choice
        options:
          - update
          - create
          - destroy
      database:
        description: 'Database type'
        required: true
        default: 'clean'
        type: choice
        options:
          - clean
          - sanitize

env:
  TESTLINK_NAME: ${{ github.event.inputs.name }}
  REPOSITORY_NAME: ${{ github.repository }}
  PARSED_NAME: "${{env.REPOSITORY_NAME##*/}}"

jobs:
  prepare:
    name: Prepare ${{ github.event.inputs.name }}
    runs-on: self-hosted
    if: github.event.inputs.action == 'update' && github.ref != 'refs/heads/master'
    steps:
      - name: Prepare ${{ env.TESTLINK_NAME }} ðŸš—
        run: |
            echo "Actions is ${{ github.event.inputs.action }}"
            echo "Branch is ${{ github.ref_name }}"
            echo "$PARSED_NAME"
  build_frontned:
    name: Build FrontEnd ${{ github.event.inputs.name }}
    runs-on: self-hosted
    if: github.event.inputs.action == 'update' && github.ref != 'refs/heads/master'
    needs: [prepare]
    steps:
      - name: Build FrontEnd ${{ env.TESTLINK_NAME }} ðŸš—
        run: |
            echo "Actions is ${{ github.event.inputs.action }}"
  build_containers:
    name: Build Containers ${{ github.event.inputs.name }}
    runs-on: self-hosted
    if: github.event.inputs.action == 'update' && github.ref != 'refs/heads/master'
    needs: [prepare]
    steps:
      - name: Build Containers ${{ env.TESTLINK_NAME }} ðŸš—
        run: |
            echo "Actions is ${{ github.event.inputs.action }}"
  deploy:
    name: Deploy ${{ github.event.inputs.name }}
    environment: ${{ github.event.inputs.name }}
    runs-on: self-hosted
    if: github.event.inputs.action == 'update' && github.ref != 'refs/heads/master'
    needs: [build_frontned, build_containers]
    steps:
      - name: Checkout ðŸ‘€
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
          lfs: true
      - name: Deploy ${{ env.TESTLINK_NAME }} ðŸš—
        run: |
            echo "Actions is ${{ github.event.inputs.action }}"
            sh/pipeline/merge_pull_request.sh
  create:
    name: Create ${{ github.event.inputs.name }}
    environment: ${{ github.event.inputs.name }}
    runs-on: self-hosted
    if: github.event.inputs.action == 'create' && github.ref != 'refs/heads/master'
    steps:
      - name: Create ${{ env.TESTLINK_NAME }} ðŸš—
        run: |
            echo "Actions is ${{ github.event.inputs.action }}"
            echo ${{ vars.AWS_ACCESS_KEY_ID }}
            if [[ "${{ github.event.inputs.database }}" == "sanitize" ]]; then
              export TF_VAR_prod_db="true"
            fi
            echo $TF_VAR_prod_db
  destroy:
    name: Destroy ${{ github.event.inputs.name }}
    runs-on: self-hosted
    if: github.event.inputs.action == 'destroy' && github.ref != 'refs/heads/master'
    steps:
      - name: Destroy ${{ env.TESTLINK_NAME }} ðŸš—
        run: |
            echo "Actions is ${{ github.event.inputs.action }}"